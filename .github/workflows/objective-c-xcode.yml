name: Xcode - Build and Analyze

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and analyse default scheme using xcodebuild command
    runs-on: macos-14 # Specifically use macOS 14 for newer Xcode

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      # Display available Xcode versions
      - name: List available Xcode versions
        run: |
          echo "Available Xcode versions:"
          ls -la /Applications/ | grep "Xcode"
          sudo xcode-select -p
      
      # Try to select Xcode 16.2 if available
      - name: Select Xcode 16.2
        run: |
          if [ -d "/Applications/Xcode_16.2.app" ]; then
            echo "Found Xcode 16.2, selecting it"
            sudo xcode-select -s /Applications/Xcode_16.2.app
            xcodebuild -version
          elif [ -d "/Applications/Xcode_16.app" ]; then
            echo "Found Xcode 16, selecting it"
            sudo xcode-select -s /Applications/Xcode_16.app
            xcodebuild -version
          else
            echo "WARNING: Could not find Xcode 16.2 or 16.x, which is needed for your project format"
            echo "Current Xcode version:"
            xcodebuild -version
            echo ""
            echo "You may need to downgrade your project format locally using an older version of Xcode"
            echo "Or update GitHub's workflow to use a container with Xcode 16.2+"
          fi
      
      # Set up example configuration files
      - name: Set up configuration files
        run: |
          cp Nimbus/Info.plist.example Nimbus/Info.plist
          cp Nimbus/GoogleService-Info.plist.example Nimbus/GoogleService-Info.plist
          cp Nimbus/client_id.plist.example Nimbus/client_YOUR_CLIENT_ID.apps.googleusercontent.com-2.plist
      
      # Check project structure
      - name: Check project structure
        run: |
          echo "Project structure:"
          ls -la
          echo ""
          echo "Xcode project details:"
          find . -name "*.xcodeproj" -type d -exec ls -la {} \;
          echo ""
          echo "Xcode project contents:"
          find . -name "*.xcodeproj" -type d -exec ls -la {}/ \;
      
      # Try a simpler build command that doesn't require reading project structure
      - name: Build
        run: |
          # First attempt - try with Nimbus scheme
          echo "Attempting build with hardcoded values and skipping code signing..."
          
          # Check if we have a workspace or just a project
          if [ -d "Nimbus.xcworkspace" ]; then
            echo "Building workspace: Nimbus.xcworkspace with scheme: Nimbus"
            xcodebuild clean build -workspace Nimbus.xcworkspace -scheme Nimbus CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO ONLY_ACTIVE_ARCH=NO || \
            xcodebuild clean build -workspace Nimbus.xcworkspace -scheme "Nimbus" CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO ONLY_ACTIVE_ARCH=NO
          else
            echo "Building project: Nimbus.xcodeproj with scheme: Nimbus"
            xcodebuild clean build -project Nimbus.xcodeproj -scheme Nimbus CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO ONLY_ACTIVE_ARCH=NO || \
            xcodebuild clean build -project Nimbus.xcodeproj -scheme "Nimbus" CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO ONLY_ACTIVE_ARCH=NO || \
            xcodebuild clean build -project Nimbus.xcodeproj -alltargets CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO ONLY_ACTIVE_ARCH=NO
          fi