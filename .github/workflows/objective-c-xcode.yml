name: Xcode - Build and Analyze

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and analyse default scheme using xcodebuild command
    runs-on: macos-14 # Specifically use macOS 14 for newer Xcode

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      # Display Xcode version for debugging
      - name: Xcode Version
        run: xcodebuild -version
      
      # Set up example configuration files
      - name: Set up configuration files
        run: |
          cp Nimbus/Info.plist.example Nimbus/Info.plist
          cp Nimbus/GoogleService-Info.plist.example Nimbus/GoogleService-Info.plist
          cp Nimbus/client_id.plist.example Nimbus/client_YOUR_CLIENT_ID.apps.googleusercontent.com-2.plist
      
      # Use original scheme detection and build steps
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n" || echo '{"project":{"targets":["Nimbus"]}}')
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
          
      - name: Build
        env:
          scheme: ${{ 'default' }}
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild clean build analyze -scheme "$scheme" -"$filetype_parameter" "$file_to_build" | xcpretty && exit ${PIPESTATUS[0]}